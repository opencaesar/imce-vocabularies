@dc:title "Project"
@dc:^description "The Project Ontology defines concepts and properties for describing a project in terms of its stakeholders, concerns, work breakdown, and deliverables. It provides a basis for specialization by domain experts."
@dc:rights """Copyright 2020, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.

This software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses, or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."""
@dc:creator "Jet Propulsion Laboratory"
@dc:hasVersion "1.0.3"
@dc:date "2020-09-29"
vocabulary <http://imce.jpl.nasa.gov/foundation/project> with # as project {

	extends <http://imce.jpl.nasa.gov/foundation/analysis>

	@dc:^description "<classname>AssignedElement</classname> is the domain of <property>isAssignedTo</property>."
	@rdfs:label "Assigned Element"
	aspect AssignedElement

	@dc:^description "<classname>BoundElement</classname> is the domain of <property>binds</property>."
	@rdfs:label "Bound Element"
	aspect BoundElement

	@dc:^description "<classname>DevelopedElement</classname> is the domain of <property>manifests</property>."
	@rdfs:label "Developed Element"
	aspect DevelopedElement

	@dc:^description "<classname>RealizedElement</classname> is the domain and range of <property>realizes</property>."
	@rdfs:label "Realized Element"
	aspect RealizedElement

	@dc:^description "A <classname>SuppliedElement</classname> is the range of <property>supplies</property>."
	@rdfs:label "Supplied Element"
	aspect SuppliedElement

	@dc:^description """An <classname>Authority</classname> is any entity that asserts a fact in a model. Example <classname>Authority</classname>s include <classname>Program</classname>, <classname>Project</classname>, and <classname>WorkPackage</classname>. (The association of an 
    <classname>Authority</classname> with its asserted facts requires mechanisms outside the vocabulary of OML and OWL proper, e.g., named graphs. Authorization is conveyed by the organization of statements in a repository.)"""
	@rdfs:label "Authority"
	concept Authority

	@dc:^description "<para>A <classname>Concern</classname> is a specific interest that one or more <classname>Stakeholder<classname>s have in the successful completion of a <classname>Project</classname> or <classname>Program</classname> and its <classname>Mission</classname>s. </para>"
	@rdfs:label "Concern"
	concept Concern :> base:IdentifiedElement, base:AggregatedElement [
		restricts all relation base:aggregates to Concern
		restricts all relation base:isAggregatedIn to Concern
	]

	@dc:^description "A <classname>Deliverable</classname> is the result of successful execution of a <classname>Process</classname>. It may be a prerequisite to another <classname>Process</classname>."
	@rdfs:label "Deliverable"
	concept Deliverable :> base:IdentifiedElement

	@dc:^description """A <classname>DevelopmentState</classname> is a kind of <classname>Deliverable</classname> that represents a defined condition for a <classname>DevelopedElement</classname>. <classname>DevelopmentState</classname>s may be unique to the 
    <classname>DevelopedElement</classname>; example <classname>DevelopmentState</classname>s for a <classname>Product</classname> include Preliminary, Draft, and Final."""
	@rdfs:label "Development State"
	concept DevelopmentState :> analysis:Characterization, Deliverable [
		restricts all relation analysis:characterizes to DevelopedElement
	]

	@dc:^description "A <classname>Facility</classname> is any asset (e.g., laboratory, assembly facility, test facility, etc.) whose <classname>DevelopmentState</classname> may be a <classname>Deliverable</classname> for a project process."
	@rdfs:label "Facility"
	concept Facility :> base:IdentifiedElement, DevelopedElement

	@dc:^description "An <classname>Interchange</classname> represents the intended joint behavior of a pair of <classname>Process</classname>es. It indicates that a <classname>Deliverable</classname> may be delivered by one <classname>Process</classname> 
    and received by the other <classname>Process</classname>."
	@rdfs:label "Interchange"
	concept Interchange :> base:IdentifiedElement

	@dc:^description """An <classname>InterchangePoint</classname> is a feature of a <classname>Process</classname> that permits it to participate
			in an <classname>Interchange</classname>."""
	@rdfs:label "Interchange Point"
	concept InterchangePoint :> base:IdentifiedElement

	@dc:^description "An <classname>Organization</classname> is <property>isResponsibleFor</property> zero or more <classname>Authority</classname>s."
	@rdfs:label "Organization"
	concept Organization :> base:IdentifiedElement

	@dc:^description "A <classname>Person</classname> is an individual human being. A <classname>Person</classname> <property>belongsTo</property> zero or more <classname>Organization</classname>s."
	@rdfs:label "Person"
	concept Person :> base:IdentifiedElement

	@dc:^description "A <classname>Policy</classname> represents a specific exercise of authority that <property>binds</property> one or more model elements."
	@rdfs:label "Policy"
	concept Policy :> base:IdentifiedElement

	@dc:^description "A <classname>Process</classname> is an activity authorized by a <classname>WorkPackage</classname> in support of delivering a <classname>Component</classname> or producing a <classname>Product</classname>. Examples include <emphasis>
    design trajectory</emphasis>, <emphasis>conduct trade study</emphasis>, and <emphasis>review subsystem design</emphasis>."
	@rdfs:label "Process"
	concept Process :> base:IdentifiedElement, AssignedElement, RealizedElement [
		restricts all relation realizes to Process
		restricts all relation isRealizedBy to Process
	]

	@dc:^description "A <classname>Product</classname> is a document or other artifact supplied by a <classname>WorkPackage</classname>. Example <classname>Product</classname>s include trade study reports, design documents, and inspection reports."
	@rdfs:label "Product"
	concept Product :> base:AggregatedElement, base:IdentifiedElement, DevelopedElement, SuppliedElement [
		restricts all relation base:aggregates to Product
		restricts all relation base:isAggregatedIn to Product
	]

	@dc:^description """A <classname>Program</classname> is an <classname>Authority</classname> that <property>authorizes</property> zero or more <classname>Project</classname>s."""
	@rdfs:label "Program"
	concept Program :> Authority [
		restricts all relation authorizes to Project
	]

	@dc:^description "A <classname>Project</classname> is an <classname>Authority</classname> that <property>supplies</property> a related set of <classname>Mission</classname>s in pursuit of a set of <classname>Objective</classname>s."
	@rdfs:label "Project"
	concept Project :> Authority, RealizedElement [
		restricts all relation authorizes to WorkPackage
		restricts all relation isAuthorizedBy to Program
		restricts all relation realizes to Project
		restricts all relation isRealizedBy to Project
		restricts all relation supplies to mission:Mission
	]

	@dc:^description "A <classname>Role</classname> corresponds to a set of assignments meant to be filled by a single <classname>Person</classname>."
	@rdfs:label "Role"
	concept Role :> base:IdentifiedElement

	@dc:^description "A <classname>Stakeholder</classname> is a person or organization with a recognized interest in the successful completion of a <classname>Project</classname> or <classname>Program</classname>. Example 
    <classname>Stakeholder</classname>s include scientists, NASA Directorates, nuclear safety advocates, and the general public."
	@rdfs:label "Stakeholder"
	concept Stakeholder :> base:IdentifiedElement

	@dc:^description """A <classname>WorkPackage</classname> is an <classname>Authority</classname> subordinate to a <classname>Project</classname>
			that <property>produces</property> definite <classname>Product</classname>s and/or <property>supplies</property> definite
			<classname>SuppliedElements</classname> in the context of that <classname>Project</classname>."""
	@rdfs:label "Work Package"
	concept WorkPackage :> base:Package, Authority, RealizedElement [
		restricts all relation authorizes to WorkPackage
		restricts all relation isAuthorizedBy to Program
		restricts all relation isRealizedBy to WorkPackage
		restricts all relation realizes to WorkPackage
		restricts all relation supplies to mission:Component
	]

	@rdfs:label "Approves"
	relation entity Approves :> HasAssignment [
		from Role
		to Product
		@rdfs:label "approves"
		@dc:^description "A <classname>Role</classname> <property>approves</property> zero or more <classname>Product</classname>s."
		forward approves
		@rdfs:label "is approved by"
		@dc:^description "See <property>approves</property>."
		reverse isApprovedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Authorizes"
	relation entity Authorizes [
		from Authority
		to Authority
		@rdfs:label "authorizes"
		@dc:^description "An <classname>Authority</classname> <property>authorizes</property> zero or more <classname>Authority</classname>s."
		forward authorizes
		@rdfs:label "is authorized by"
		@dc:^description "See <property>authorizes</property>."
		reverse isAuthorizedBy
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Belongs To"
	relation entity BelongsTo [
		from Person
		to Organization
		@dc:^description "A <classname>Person</classname> <property>belongsTo</property> zero or more <classname>Organization</classname>s."
		@rdfs:label "belongs to"
		forward belongsTo
	]

	@rdfs:label "Binds"
	relation entity Binds [
		from Policy
		to BoundElement
		@dc:^description """A <classname>Policy</classname> <property>binds</property> zero or more <classname>BoundElement</classname>s."""
		@rdfs:label "binds"
		forward binds
		@dc:^description "See <property>binds</property>."
		@rdfs:label "is bound by"
		reverse isBoundBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Concurs"
	relation entity Concurs :> HasAssignment [
		from Role
		to Product
		@dc:^description """A <classname>Role</classname> <property>concurs</property> in zero or more <classname>Product</classname>s."""
		@rdfs:label "concurs"
		forward concurs
		@dc:^description "See <property>concurs</property>."
		@rdfs:label "is concurred by"
		reverse isConcurredBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Delegates To"
	relation entity DelegatesTo [
		from Role
		to Role
		@dc:^description """A <classname>Role</classname> <property>delegatesTo</property> zero or more <classname>Role</classname>s."""
		@rdfs:label "delegates to"
		forward delegatesTo
		@dc:^description "See <property>delegatesTo</property>."
		@rdfs:label "is delegate of"
		reverse isDelegateOf
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Delivers"
	relation entity Delivers [
		from InterchangePoint
		to Deliverable
		@dc:^description """An <classname>InterchangePoint</classname> <property>delivers</property> zero or more <classname>Deliverable</classname>s."""
		@rdfs:label "delivers"
		forward delivers
		@dc:^description "See <property>delivers</property>."
		@rdfs:label "is delivered by"
		reverse isDeliveredBy
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Describes"
	relation entity Describes [
		from Product
		to DevelopedElement
		@dc:^description """A <classname>Product</classname> <property>describes</property> zero or more <classname>DevelopedElement</classname>s."""
		@rdfs:label "describes"
		forward describes
		@dc:^description "See <property>describes</property>."
		@rdfs:label "is described by"
		reverse isDescribedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Executes"
	relation entity Executes [
		from Authority
		to Process
		@dc:^description """An <classname>Authority</classname> <property>executes</property> zero or more <classname>Process</classname>es."""
		@rdfs:label "executes"
		forward executes
		@dc:^description "See <property>executes</property>."
		@rdfs:label "is executed by"
		reverse isExecutedBy
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Has Assignment"
	relation entity HasAssignment [
		from Role
		to AssignedElement
		@dc:^description """A <classname>Role</classname> <property>hasAssignment</property> zero or more <classname>AssignedElement</classname>es."""
		@rdfs:label "has assignment"
		forward hasAssignment
		@dc:^description "See <property>hasAssignment</property>."
		@rdfs:label "is assigned to"
		reverse isAssignedTo
		asymmetric
		irreflexive
	]

	@rdfs:label "Has Participant"
	relation entity HasParticipant [
		from Interchange
		to Deliverable
		@dc:^description """An <classname>Interchange</classname> <property>hasParticipant</property> zero or more <classname>Deliverable</classname>s."""
		@rdfs:label "has participant"
		forward hasParticipant
		@rdfs:label "participates in"
		@dc:^description "See <property>has participant</property>."
		reverse participatesIn
		asymmetric
		irreflexive
	]

	@rdfs:label "Has Responsibility For"
	relation entity HasResponsibilityFor [
		from Organization
		to Authority
		@dc:^description """An <classname>Organization</classname> <property>hasResponsibilityFor</property> zero or more <classname>Authority</classname>s."""
		@rdfs:label "has responsibility for"
		forward hasResponsibilityFor
		@dc:^description "See <property>hasResponsibilityFor</property>."
		@rdfs:label "is responsibility of"
		reverse isResponsibilityOf
		inverse functional
	]

	@rdfs:label "Has Role"
	relation entity HasRole [
		from Person
		to Role
		@dc:^description """A <classname>Person</classname> <property>hasRole</property> zero or more <classname>Role</classname>s."""
		@rdfs:label "has role"
		forward hasRole
		@dc:^description "See <property>hasRole</property>."
		@rdfs:label "is role of"
		reverse isRoleOf
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Interchanges Through"
	relation entity InterchangesThrough [
		from Process
		to InterchangePoint
		@rdfs:label "interchanges through"
		@dc:^description """A <classname>Process</classname> <property>interchangesThrough</property> zero or more <classname>InterchangePoint</classname>s."""
		forward interchangesThrough
		@rdfs:label "is interchange point for"
		reverse isInterchangePointFor
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Invokes"
	relation entity Invokes [
		from Process
		to Process
		@dc:^description """A <classname>Process</classname> <property>invokes</property> zero or more <classname>Process</classname>es."""
		@rdfs:label "invokes"
		forward invokes
		@dc:^description "See <property>invokes</property>."
		@rdfs:label "is invoked by"
		reverse isInvokedBy
		irreflexive
	]

	@rdfs:label "Involves"
	relation entity Involves [
		from Interchange
		to Process
		@dc:^description """An <classname>Interchange</classname> <property>involves</property> zero or more <classname>Process</classname>es."""
		@rdfs:label "involves"
		forward involves
		@rdfs:label "is involved in"
		reverse isInvolvedIn
		asymmetric
		irreflexive
	]

	@rdfs:label "Involves1"
	relation entity Involves1 :> Involves [
		from Interchange
		to Process
		@rdfs:label "involves1"
		@dc:^description """<property>involves1</property> and <property>involves2</property> are distinguishable specializations of
							<property>involves</property>. These specializations are employed to indicate distinct ends of an
							<classname>Interchange</classname>."""
		forward involves1
		@rdfs:label "is involved in1"
		reverse isInvolvedIn1
		functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Involves2"
	relation entity Involves2 :> Involves [
		from Interchange
		to Process
		@rdfs:label "involves2"
		@dc:^description """<property>involves1</property> and <property>involves2</property> are distinguishable specializations of
							<property>involves</property>. These specializations are employed to indicate distinct ends of an
							<classname>Interchange</classname>."""
		forward involves2
		@rdfs:label "is involved in2"
		reverse isInvolvedIn2
		functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Manifests"
	relation entity Manifests [
		from DevelopedElement
		to DevelopmentState
		@dc:^description """A <classname>DevelopedElement</classname> <property>manifests</property> zero or more <classname>DevelopmentState</classname>s."""
		@rdfs:label "manifests"
		forward manifests
		@dc:^description "See <property>manifests</property>."
		@rdfs:label "is manifested by"
		reverse isManfestedBy
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Prepares"
	relation entity Prepares :> HasAssignment [
		from Role
		to Product
		@rdfs:label "prepares"
		@dc:^description """A <classname>Role</classname> <property>prepares</property> zero or more <classname>Product</classname>s."""
		forward prepares
		@rdfs:label "is prepared by"
		reverse isPreparedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Produces"
	relation entity Produces [
		from Authority
		to Product
		@dc:^description """A <classname>Authority</classname> <property>produces</property> zero or more <classname>Product</classname>s."""
		@rdfs:label "produces"
		forward produces
		@dc:^description "See <property>produces</property>."
		@rdfs:label "is produced by"
		reverse isProducedBy
		inverse functional
		asymmetric
		irreflexive
	]

	@rdfs:label "Realizes"
	relation entity Realizes [
		from RealizedElement
		to RealizedElement
		@dc:^description """A <classname>RealizedElement</classname> <property>realizes</property> zero or more <classname>RealizedElement</classname>s."""
		@rdfs:label "realizes"
		forward realizes
		@dc:^description "See <property>realizes</property>."
		@rdfs:label "is realized by"
		reverse isRealizedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Receives"
	relation entity Receives :> AssignedElement [
		from InterchangePoint
		to Deliverable
		@dc:^description """An <classname>InterchangePoint</classname> <property>receives</property> zero or more <classname>Deliverable</classname>s."""
		@rdfs:label "receives"
		forward receives
		@dc:^description "See <property>receives</property>."
		@rdfs:label "is received by"
		reverse isReceivedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Relies On"
	relation entity ReliesOn :> AssignedElement [
		from Authority
		to DevelopedElement
		@dc:^description """An <classname>Authority</classname> <property>reliesOn</property> zero or more <classname>DevelopedElement</classname>s."""
		@rdfs:label "relies on"
		forward reliesOn
		@rdfs:label "is relied on by"
		reverse isReliedOnBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Represents"
	relation entity Represents [
		from Stakeholder
		to Concern
		@dc:^description """An <classname>Stakeholder</classname> <property>represents</property> zero or more <classname>Concern</classname>s."""
		@rdfs:label "represents"
		forward represents
		@dc:^description "See <property>represents</property>."
		@rdfs:label "is represented by"
		reverse isRepresentedBy
		asymmetric
		irreflexive
	]

	@rdfs:label "Supplies"
	relation entity Supplies :> AssignedElement [
		from Authority
		to SuppliedElement
		@dc:^description """An <classname>Authority</classname> <property>supplies</property> zero or more <classname>SuppliedElement</classname>s."""
		@rdfs:label "supplies"
		forward supplies
		@dc:^description "See <property>supplies</property>."
		@rdfs:label "is supplied by"
		reverse isSuppliedBy
		inverse functional
		asymmetric
		irreflexive
	]

	scalar date

	@dc:^description "A <classname>ScheduledElement</classname> <property>isRequiredNotLaterThan</property> some <property>date</property>."
	@rdfs:label "is required not later than"
	scalar property isRequiredNotLaterThan [
		domain Deliverable
		range date
	]

	ref concept mission:Objective :> Concern

	ref concept mission:Component :> DevelopedElement, RealizedElement, SuppliedElement [
		restricts all relation isRealizedBy to mission:Component
		restricts all relation realizes to mission:Component
		restricts all relation isSuppliedBy to WorkPackage
	]

	ref concept mission:Function :> RealizedElement [
		restricts all relation isRealizedBy to mission:Function
		restricts all relation realizes to mission:Function
	]

	ref concept mission:Interface :> DevelopedElement, RealizedElement [
		restricts all relation isRealizedBy to mission:Interface
		restricts all relation realizes to mission:Interface
	]

	ref concept mission:Junction :> DevelopedElement, RealizedElement [
		restricts all relation realizes to mission:Junction
		restricts all relation isRealizedBy to mission:Junction
	]

	ref concept mission:Mission :> RealizedElement, SuppliedElement [
		restricts all relation isRealizedBy to mission:Mission
		restricts all relation realizes to mission:Mission
		restricts all relation isSuppliedBy to Project
	]
}